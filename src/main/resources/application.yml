server:
  port: 8080
  tomcat:
    uri-encoding: UTF-8

spring:
  http:
    encoding:
      charset: UTF-8
      enabled: true
      force: true
  servlet:
    multipart:
      max-file-size: 10MB

  datasource:
    name: test
    url: jdbc:postgresql://localhost:5432/sell
    username: postgres
    password: 'dys123!@#'
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: org.postgresql.Driver
    # database使用druid
    druid:
      filters: stat
      max-active: 20
      initial-size: 1
      max-wait: 60000
      min-idle: 1
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      validation-query: select now()
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      max-open-prepared-statements: 20
      pool-prepared-statements: true
#      ## druid监控配置
#      # WebStatFilter配置，说明请参考Druid Wiki，配置_配置WebStatFilter
#      web-stat-filter:
#        # 是否启用StatFilter默认值true
#        enabled: true
#        # 添加过滤规则
#        url-pattern: /*
#        # 添加不需要忽略的格式信息
#        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
#        # session统计功能
#        session-stat-enable: true
#        # 最大session数
#        session-stat-max-count: 100000
#        # 可以配置principalSessionName，使得druid能够知道当前的session的用户是谁
#        principal-session-name: admin
#        # 可以配置principalSessionName，使得druid能够知道当前的cookie的用户是谁
#        principal-cookie-name: admin
#        # 置profileEnable能够监控单个url调用的sql列表。
#        profile-enable: true
#      ## StatViewServlet配置，说明请参考Druid Wiki，配置_StatViewServlet配置
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        reset-enable: true
        login-username: admin
        login-password: 'yl159!%('
        allow: 127.0.0.1
      ## Spring监控配置，说明请参考Druid Github Wiki，配置_Druid和Spring关联监控配置
      #  Spring监控AOP切入点，如x.y.z.service.*,配置多个英文逗号分隔
      aop-patterns: com.zhyle.contract.service.*
      # 配置wall filter
      filter:
        wall:
          enabled: true
          db-type: postgresql
          config:
            alter-table-allow: false
            truncate-allow: false
            drop-table-allow: false
            # 是否允许非以上基本语句的其他语句，缺省关闭，通过这个选项就能够屏蔽DDL。
            none-base-statement-allow: false
            # 检查UPDATE语句是否无where条件，这是有风险的，但不是SQL注入类型的风险
            update-where-none-check: true
            # SELECT ... INTO OUTFILE 是否允许，这个是mysql注入攻击的常见手段，缺省是禁止的
            select-into-outfile-allow: false
            # getMetadata方法，这个方法调用会暴露数据库的表信息:
            metadata-allow: true
          # 对被认为是攻击的SQL进行LOG.error输出
          log-violation: true
          # 对被认为是攻击的SQL抛出SQLExcepton
          throw-exception: true
  thymeleaf:
    encoding: UTF-8
    prefix: classpath:/templates/
    suffix: .html
    cache: false
    enabled: true
    mode: HTML
    servlet:
      content-type: text/html

## 该配置节点为独立的节点，有很多同学容易将这个配置放在spring的节点下，导致配置无法被识别
mybatis:
  mapper-locations: classpath:mappings/**/*.xml  #注意：一定要对应mapper映射xml文件的所在路径
  type-aliases-package: cn.net.szwx.sell.entity  # 注意：对应实体类的路径
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

#pagehelper分页插件
pagehelper:
  helperDialect: postgresql
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql